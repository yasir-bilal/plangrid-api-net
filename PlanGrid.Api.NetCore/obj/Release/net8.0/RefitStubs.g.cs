// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace PlanGrid.Api
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIPlanGridApi : IPlanGridApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIPlanGridApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<Page<Project>> GetProjects(int skip,int limit)
        {
            var arguments = new object[] { skip,limit };
            return (Task<Page<Project>>) methodImpls["GetProjects"](Client, arguments);
        }

        public virtual Task<Project> GetProject(string projectUid)
        {
            var arguments = new object[] { projectUid };
            return (Task<Project>) methodImpls["GetProject"](Client, arguments);
        }

        public virtual Task<Project> CreateProject(ProjectUpdate project)
        {
            var arguments = new object[] { project };
            return (Task<Project>) methodImpls["CreateProject"](Client, arguments);
        }

        public virtual Task<Project> UpdateProject(string projectUid,ProjectUpdate project)
        {
            var arguments = new object[] { projectUid,project };
            return (Task<Project>) methodImpls["UpdateProject"](Client, arguments);
        }

        public virtual Task<Page<Comment>> GetComments(string projectUid,int skip,int limit,DateTime? updated_after,RecordType[] record_types)
        {
            var arguments = new object[] { projectUid,skip,limit,updated_after,record_types };
            return (Task<Page<Comment>>) methodImpls["GetComments"](Client, arguments);
        }

        public virtual Task<Page<User>> GetUsers(string projectUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,skip,limit };
            return (Task<Page<User>>) methodImpls["GetUsers"](Client, arguments);
        }

        public virtual Task<User> GetUser(string projectUid,string userUid)
        {
            var arguments = new object[] { projectUid,userUid };
            return (Task<User>) methodImpls["GetUser"](Client, arguments);
        }

        public virtual Task<User> GetUserProfile()
        {
            var arguments = new object[] {  };
            return (Task<User>) methodImpls["GetUserProfile"](Client, arguments);
        }

        public virtual Task<Page<Role>> GetRoles(string projectUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,skip,limit };
            return (Task<Page<Role>>) methodImpls["GetRoles"](Client, arguments);
        }

        public virtual Task<Role> GetRole(string projectUid,string roleUid)
        {
            var arguments = new object[] { projectUid,roleUid };
            return (Task<Role>) methodImpls["GetRole"](Client, arguments);
        }

        public virtual Task<User> InviteUser(string projectUid,UserInvitation invitation)
        {
            var arguments = new object[] { projectUid,invitation };
            return (Task<User>) methodImpls["InviteUser"](Client, arguments);
        }

        public virtual Task RemoveUser(string projectUid,string userUid)
        {
            var arguments = new object[] { projectUid,userUid };
            return (Task) methodImpls["RemoveUser"](Client, arguments);
        }

        public virtual Task<Issue> GetIssue(string projectUid,string issueUid)
        {
            var arguments = new object[] { projectUid,issueUid };
            return (Task<Issue>) methodImpls["GetIssue"](Client, arguments);
        }

        public virtual Task<Page<Issue>> GetIssues(string projectUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,skip,limit };
            return (Task<Page<Issue>>) methodImpls["GetIssues"](Client, arguments);
        }

        public virtual Task<Page<Comment>> GetIssueComments(string projectUid,string issueUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,issueUid,skip,limit };
            return (Task<Page<Comment>>) methodImpls["GetIssueComments"](Client, arguments);
        }

        public virtual Task<Page<Photo>> GetIssuePhotos(string projectUid,string issueUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,issueUid,skip,limit };
            return (Task<Page<Photo>>) methodImpls["GetIssuePhotos"](Client, arguments);
        }

        public virtual Task<Page<Rfi>> GetRfis(string projectUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,skip,limit };
            return (Task<Page<Rfi>>) methodImpls["GetRfis"](Client, arguments);
        }

        public virtual Task<Rfi> GetRfi(string projectUid,string rfiUid)
        {
            var arguments = new object[] { projectUid,rfiUid };
            return (Task<Rfi>) methodImpls["GetRfi"](Client, arguments);
        }

        public virtual Task<Page<RfiStatus>> GetRfiStatuses(string projectUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,skip,limit };
            return (Task<Page<RfiStatus>>) methodImpls["GetRfiStatuses"](Client, arguments);
        }

        public virtual Task<Page<Attachment>> GetRfiAttachments(string projectUid,string rfiUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,rfiUid,skip,limit };
            return (Task<Page<Attachment>>) methodImpls["GetRfiAttachments"](Client, arguments);
        }

        public virtual Task<Page<Comment>> GetRfiComments(string projectUid,string rfiUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,rfiUid,skip,limit };
            return (Task<Page<Comment>>) methodImpls["GetRfiComments"](Client, arguments);
        }

        public virtual Task<Page<Photo>> GetRfiPhotos(string projectUid,string rfiUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,rfiUid,skip,limit };
            return (Task<Page<Photo>>) methodImpls["GetRfiPhotos"](Client, arguments);
        }

        public virtual Task<Page<Snapshot>> GetRfiSnapshots(string projectUid,string rfiUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,rfiUid,skip,limit };
            return (Task<Page<Snapshot>>) methodImpls["GetRfiSnapshots"](Client, arguments);
        }

        public virtual Task RemoveSnapshotFromRfi(string projectUid,string rfiUid,string snapshotUid)
        {
            var arguments = new object[] { projectUid,rfiUid,snapshotUid };
            return (Task) methodImpls["RemoveSnapshotFromRfi"](Client, arguments);
        }

        public virtual Task RemovePhotoFromRfi(string projectUid,string rfiUid,string photoUid)
        {
            var arguments = new object[] { projectUid,rfiUid,photoUid };
            return (Task) methodImpls["RemovePhotoFromRfi"](Client, arguments);
        }

        public virtual Task RemoveAttachmentFromRfi(string projectUid,string rfiUid,string attachmentUid)
        {
            var arguments = new object[] { projectUid,rfiUid,attachmentUid };
            return (Task) methodImpls["RemoveAttachmentFromRfi"](Client, arguments);
        }

        public virtual Task<Page<RfiChange>> GetRfiHistory(string projectUid,string rfiUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,rfiUid,skip,limit };
            return (Task<Page<RfiChange>>) methodImpls["GetRfiHistory"](Client, arguments);
        }

        public virtual Task<RfiStatus> UpdateRfiStatus(string projectUid,string statusUid,RfiStatusUpdate statusUpdate)
        {
            var arguments = new object[] { projectUid,statusUid,statusUpdate };
            return (Task<RfiStatus>) methodImpls["UpdateRfiStatus"](Client, arguments);
        }

        public virtual Task<Rfi> CreateRfi(string projectUid,RfiUpsert rfi)
        {
            var arguments = new object[] { projectUid,rfi };
            return (Task<Rfi>) methodImpls["CreateRfi"](Client, arguments);
        }

        public virtual Task<Rfi> UpdateRfi(string projectUid,string rfiUid,RfiUpsert rfi)
        {
            var arguments = new object[] { projectUid,rfiUid,rfi };
            return (Task<Rfi>) methodImpls["UpdateRfi"](Client, arguments);
        }

        public virtual Task<FileUpload> CreateAttachmentUploadRequest(string projectUid,AttachmentUpload upload)
        {
            var arguments = new object[] { projectUid,upload };
            return (Task<FileUpload>) methodImpls["CreateAttachmentUploadRequest"](Client, arguments);
        }

        public virtual Task RemoveAttachment(string projectUid,string attachmentUid)
        {
            var arguments = new object[] { projectUid,attachmentUid };
            return (Task) methodImpls["RemoveAttachment"](Client, arguments);
        }

        public virtual Task<Attachment> UpdateAttachment(string projectUid,string attachmentUid,AttachmentUpdate attachment)
        {
            var arguments = new object[] { projectUid,attachmentUid,attachment };
            return (Task<Attachment>) methodImpls["UpdateAttachment"](Client, arguments);
        }

        public virtual Task<Page<Attachment>> GetAttachments(string projectUid,int skip,int limit,string folder,DateTime? updated_after)
        {
            var arguments = new object[] { projectUid,skip,limit,folder,updated_after };
            return (Task<Page<Attachment>>) methodImpls["GetAttachments"](Client, arguments);
        }

        public virtual Task<Attachment> GetAttachment(string projectUid,string attachmentUid)
        {
            var arguments = new object[] { projectUid,attachmentUid };
            return (Task<Attachment>) methodImpls["GetAttachment"](Client, arguments);
        }

        public virtual Task<FileUpload> CreatePhotoUploadRequest(string projectUid,PhotoUpload upload)
        {
            var arguments = new object[] { projectUid,upload };
            return (Task<FileUpload>) methodImpls["CreatePhotoUploadRequest"](Client, arguments);
        }

        public virtual Task ReferenceAttachmentFromRfi(string projectUid,string rfiUid,AttachmentReference attachmentReference)
        {
            var arguments = new object[] { projectUid,rfiUid,attachmentReference };
            return (Task) methodImpls["ReferenceAttachmentFromRfi"](Client, arguments);
        }

        public virtual Task ReferencePhotoFromRfi(string projectUid,string rfiUid,PhotoReference photoReference)
        {
            var arguments = new object[] { projectUid,rfiUid,photoReference };
            return (Task) methodImpls["ReferencePhotoFromRfi"](Client, arguments);
        }

        public virtual Task<Photo> GetPhotoInProject(string projectUid,string photoUid)
        {
            var arguments = new object[] { projectUid,photoUid };
            return (Task<Photo>) methodImpls["GetPhotoInProject"](Client, arguments);
        }

        public virtual Task RemovePhoto(string projectUid,string photoUid)
        {
            var arguments = new object[] { projectUid,photoUid };
            return (Task) methodImpls["RemovePhoto"](Client, arguments);
        }

        public virtual Task<Photo> UpdatePhoto(string projectUid,string photoUid,PhotoUpdate photo)
        {
            var arguments = new object[] { projectUid,photoUid,photo };
            return (Task<Photo>) methodImpls["UpdatePhoto"](Client, arguments);
        }

        public virtual Task<Page<Sheet>> GetSheets(string projectUid,int skip,int limit,DateTime? updated_after,string version_set)
        {
            var arguments = new object[] { projectUid,skip,limit,updated_after,version_set };
            return (Task<Page<Sheet>>) methodImpls["GetSheets"](Client, arguments);
        }

        public virtual Task<Snapshot> GetSnapshot(string projectUid,string snapshotUid)
        {
            var arguments = new object[] { projectUid,snapshotUid };
            return (Task<Snapshot>) methodImpls["GetSnapshot"](Client, arguments);
        }

        public virtual Task RemoveSnapshot(string projectUid,string snapshotUid)
        {
            var arguments = new object[] { projectUid,snapshotUid };
            return (Task) methodImpls["RemoveSnapshot"](Client, arguments);
        }

        public virtual Task<Sheet> GetSheet(string projectUid,string sheetUid)
        {
            var arguments = new object[] { projectUid,sheetUid };
            return (Task<Sheet>) methodImpls["GetSheet"](Client, arguments);
        }

        public virtual Task<VersionUpload> UploadVersion(string projectUid,UploadVersionRequest request)
        {
            var arguments = new object[] { projectUid,request };
            return (Task<VersionUpload>) methodImpls["UploadVersion"](Client, arguments);
        }

        public virtual Task<FileUpload> UploadFileToVersion(string projectUid,string versionUploadUid,string fileUploadRequestUid,UploadFile file)
        {
            var arguments = new object[] { projectUid,versionUploadUid,fileUploadRequestUid,file };
            return (Task<FileUpload>) methodImpls["UploadFileToVersion"](Client, arguments);
        }

        public virtual Task CompleteFileUpload(string projectUid,string uploadToken)
        {
            var arguments = new object[] { projectUid,uploadToken };
            return (Task) methodImpls["CompleteFileUpload"](Client, arguments);
        }

        public virtual Task CompleteVersionUpload(string projectUid,string versionUploadUid)
        {
            var arguments = new object[] { projectUid,versionUploadUid };
            return (Task) methodImpls["CompleteVersionUpload"](Client, arguments);
        }

        public virtual Task<ShareableObject> CreateSheetPacket(string projectUid,SheetPacketRequest request)
        {
            var arguments = new object[] { projectUid,request };
            return (Task<ShareableObject>) methodImpls["CreateSheetPacket"](Client, arguments);
        }

        public virtual Task<ShareableObject> GetSheetPacket(string projectUid,string packetUid)
        {
            var arguments = new object[] { projectUid,packetUid };
            return (Task<ShareableObject>) methodImpls["GetSheetPacket"](Client, arguments);
        }

        public virtual Task<Page<RateLimit>> GetRateLimits(int skip,int limit)
        {
            var arguments = new object[] { skip,limit };
            return (Task<Page<RateLimit>>) methodImpls["GetRateLimits"](Client, arguments);
        }

        public virtual Task<Page<Snapshot>> GetSnapshots(string projectUid,int skip,int limit,DateTime? updated_after)
        {
            var arguments = new object[] { projectUid,skip,limit,updated_after };
            return (Task<Page<Snapshot>>) methodImpls["GetSnapshots"](Client, arguments);
        }

        public virtual Task<Page<VersionSet>> GetVersionSets(string projectUid,int skip,int limit)
        {
            var arguments = new object[] { projectUid,skip,limit };
            return (Task<Page<VersionSet>>) methodImpls["GetVersionSets"](Client, arguments);
        }

    }
}
